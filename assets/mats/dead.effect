// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: general-vs:vert # builtin header
      frag: dead-fs:frag
      properties: &props
        tilingOffset:         { value: [1.0, 1.0, 0.0, 0.0] }
        mainColor:            { value: [1.0, 1.0, 1.0, 1.0], target: albedo, linear: true, editor: { displayName: Albedo, type: color } }
        albedoScale:          { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold:       { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST, slide: true, range: [0, 1.0], step: 0.001 } }
        emissive:             { value: [0.0, 0.0, 0.0, 1.0], linear: true, editor: { type: color } }
        emissiveScale:        { value: [1.0, 1.0, 1.0], target: emissiveScaleParam.xyz }
        normalStrength:       { value: 1.0, target: emissiveScaleParam.w, editor: { parent: USE_NORMAL_MAP, slide: true, range: [0, 5.0], step: 0.001 } }
        mainTexture:          { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
        normalMap:            { value: normal }
        noiseTexture:         { value: normal }
        dissolveColor:        { value: [0.0, 0.0, 0.0, 1.0], linear: true, editor: { type: color } }
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: dead-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 tilingOffset;
    vec4 albedo;
    vec4 albedoScaleAndCutoff;
    vec4 emissive;
    vec4 emissiveScaleParam;
    vec4 dissolveColor;
  };
}%

CCProgram dead-fs %{
  precision highp float;
  // #include <shading-standard-base>
  #include <cc-global>
  #include <shared-ubos>
  #include <output>
  #include <cc-fog-fs>
  // #include <standard-surface-entry>

  // #include <output-standard>
  // #include <cc-shadow-map-fs>

  // #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
  //   #include <lightingmap-fs>
  // #endif

  in vec2 v_uv;
  in vec3 v_position;
  #if HAS_SECOND_UV
    in vec2 v_uv1;
  #endif
  // 法線向量
  in mediump vec3 v_normal;

  #if USE_VERTEX_COLOR
    // 使用顶点颜色
    in lowp vec4 v_color;
  #endif


  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
    #pragma define-meta ALBEDO_UV options([v_uv, v_uv1])
  #endif

  #if USE_NORMAL_MAP
    in mediump vec4 v_tangent;
    uniform sampler2D normalMap;
    #pragma define-meta NORMAL_UV options([v_uv, v_uv1])
  #endif

  uniform sampler2D noiseTexture;

  // #pragma define OCCLUSION_CHANNEL          r
  // #pragma define ROUGHNESS_CHANNEL          g
  // #pragma define METALLIC_CHANNEL           b
  // #pragma define SPECULAR_INTENSITY_CHANNEL a

  // #if USE_ALPHA_TEST
  //   #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  // #endif

           
  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {
    vec4 col = texture(albedoMap, v_uv);
    CC_APPLY_FOG(col, v_position);

    // #if USE_NORMAL_MAP
    //   vec3 nmmp = texture(normalMap, NORMAL_UV);
    //   col.rgb *= nmmp;
    // #endif

    vec4 noisecol = texture(noiseTexture,v_uv);
    if(noisecol.r < cc_time.x / 10.) {
      discard;
    }
    col = mix(col,dissolveColor,0.1);
    
    return CCFragOutput(col);
 
    
  }
}%
